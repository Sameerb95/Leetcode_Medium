class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        c = Counter(arr)
        for i,v in sorted(c.items(),key = lambda x:x[1]):
            # print(k)
            if k == 0:
                break
            else:
                while k != 0 :
                    if c[i] != 0:
                        # print(c)
                        c[i]-=1
                    else:
                        break
                    k = k-1
                    
        return len([i for i,v in c.items() if v!=0])
        
        
Runtime: 492 ms, faster than 63.23% of Python3 online submissions for Least Number of Unique Integers after K Removals.
Memory Usage: 33.8 MB, less than 38.56% of Python3 online submissions for Least Number of Unique Integers after K Removals.

######################################################################################################################################

Second Approach(Fast)

class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        c = Counter(arr)
        index = 0
        for i,v in sorted(c.items(),key = lambda x:x[1]):
        #     print(i,index)
            if v <= k:
                k -= v
                index+=1
        # list(c.values()).remove(0)
        return(len(c)-index)
        
Runtime: 432 ms, faster than 86.73% of Python3 online submissions for Least Number of Unique Integers after K Removals.
Memory Usage: 33.7 MB, less than 41.79% of Python3 online submissions for Least Number of Unique Integers after K Removals.
